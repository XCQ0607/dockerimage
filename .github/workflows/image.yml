name: Build and Push Multiple Docker Images with Summaries

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase owner
        id: repo
        run: echo "owner_lower=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB1_TOKEN }}

      - name: Build and push Docker images
        run: |
          # 安装 jq 工具用于解析 JSON
          sudo apt-get update && sudo apt-get install -y jq

          OWNER=${{ steps.repo.outputs.owner_lower }}
          REPO_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2)
          SUMMARY_FILE="docker_build_summaries.md"
          echo "# Docker Build Summaries" > $SUMMARY_FILE
          echo "" >> $SUMMARY_FILE

          # 获取仓库根目录的提交信息
          ROOT_COMMIT_INFO=$(curl -s "https://github.com/$OWNER/$REPO_NAME/tree-commit-info/main")
          
          # 检查API响应是否有效
          if ! echo "$ROOT_COMMIT_INFO" | jq empty 2>/dev/null; then
            echo "Failed to get valid JSON from root commit info API, falling back to file system check"
            ROOT_COMMIT_INFO=""
          fi
          
          # 遍历所有目录
          for dir in */ ; do
            # 忽略非文件夹
            if [ ! -f "$dir/Dockerfile" ]; then
              echo "Skipping $dir, no Dockerfile"
              continue
            fi

            FLAG="$dir/build.flag"
            IMAGE_NAME="${dir%/}"
            
            # 检查是否有文件在build.flag之后更新
            NEEDS_REBUILD=false
            
            # 如果build.flag不存在，需要构建
            if [ ! -f "$FLAG" ]; then
              NEEDS_REBUILD=true
              echo "No build.flag found for $dir, will rebuild"
            else
              # 获取目录级别的提交信息
              DIR_COMMIT_DATE=""
              if [ -n "$ROOT_COMMIT_INFO" ]; then
                DIR_COMMIT_DATE=$(echo "$ROOT_COMMIT_INFO" | jq -r --arg dirname "$IMAGE_NAME" '.[$dirname].date // empty')
              fi
              
              if [ -n "$DIR_COMMIT_DATE" ] && [ "$DIR_COMMIT_DATE" != "null" ]; then
                # 获取build.flag的修改时间
                FLAG_DATE=$(date -d "$(git log -1 --format=%cI -- $FLAG)" +%s 2>/dev/null || stat -c %Y "$FLAG" 2>/dev/null || echo "0")
                
                # 将目录提交时间转换为秒
                DIR_DATE=$(date -d "$DIR_COMMIT_DATE" +%s 2>/dev/null || echo "0")
                
                # 比较时间戳
                if [ "$DIR_DATE" -gt "$FLAG_DATE" ]; then
                  NEEDS_REBUILD=true
                  echo "Directory $dir has updates since last build, will rebuild"
                else
                  # 如果目录级别没有更新，检查目录内各个文件的提交信息
                  echo "Checking individual files in $dir for updates..."
                  
                  # 获取目录内文件的提交信息
                  DIR_FILES_COMMIT_INFO=""
                  DIR_FILES_COMMIT_RESPONSE=$(curl -s "https://github.com/$OWNER/$REPO_NAME/tree-commit-info/main/$IMAGE_NAME")
                  
                  # 检查API响应是否有效
                  if echo "$DIR_FILES_COMMIT_RESPONSE" | jq empty 2>/dev/null; then
                    DIR_FILES_COMMIT_INFO="$DIR_FILES_COMMIT_RESPONSE"
                  else
                    echo "Failed to get valid JSON from directory files commit info API"
                  fi
                  
                  # 检查目录中的每个文件
                  NEEDS_REBUILD_INNER=false
                  if [ -n "$DIR_FILES_COMMIT_INFO" ]; then
                    while IFS= read -r -d '' file; do
                      # 获取文件名（不含路径）
                      filename=$(basename "$file")
                      
                      # 跳过build.flag文件本身
                      if [ "$filename" = "build.flag" ]; then
                        continue
                      fi
                      
                      # 获取文件的提交日期
                      FILE_COMMIT_DATE=$(echo "$DIR_FILES_COMMIT_INFO" | jq -r --arg fname "$filename" '.[$fname].date // empty')
                      
                      if [ -n "$FILE_COMMIT_DATE" ] && [ "$FILE_COMMIT_DATE" != "null" ]; then
                        FILE_DATE=$(date -d "$FILE_COMMIT_DATE" +%s 2>/dev/null || echo "0")
                        
                        if [ "$FILE_DATE" -gt "$FLAG_DATE" ]; then
                          NEEDS_REBUILD_INNER=true
                          echo "File $file has been updated since last build"
                          break
                        fi
                      fi
                    done < <(find "$dir" -type f -print0)
                  else
                    echo "Falling back to file system check for individual files"
                    # 如果无法获取目录内文件提交信息，回退到文件系统检查
                    UPDATED_FILES=$(find "$dir" -type f ! -name "build.flag" -newer "$FLAG" 2>/dev/null)
                    if [ -n "$UPDATED_FILES" ]; then
                      NEEDS_REBUILD_INNER=true
                    fi
                  fi
                  
                  if [ "$NEEDS_REBUILD_INNER" = true ]; then
                    NEEDS_REBUILD=true
                  else
                    echo "Skipping $dir, no files updated since last build"
                    continue
                  fi
                fi
              else
                echo "Could not get commit date for directory $dir, falling back to file system check"
                # 如果无法获取目录提交信息，回退到原来的文件系统检查方法
                UPDATED_FILES=$(find "$dir" -type f ! -name "build.flag" -newer "$FLAG" 2>/dev/null)
                if [ -n "$UPDATED_FILES" ]; then
                  NEEDS_REBUILD=true
                  echo "Found updated files in $dir (fallback method), will rebuild:"
                  echo "$UPDATED_FILES"
                else
                  echo "Skipping $dir, no files updated since last build (fallback method)"
                  continue
                fi
              fi
            fi

            # 这里是关键：只有当NEEDS_REBUILD为true时才继续构建
            if [ "$NEEDS_REBUILD" = false ]; then
              echo "Skipping $dir, already built and no updates"
              continue
            fi

            IMAGE="ghcr.io/$OWNER/$IMAGE_NAME:latest"
            echo "Building and pushing $IMAGE"

            START_TIME=$(date +%s)
            # 使用--progress=plain来增加日志输出
            docker build --progress=plain -t $IMAGE "$dir" 2>&1 | tee build.log
            BUILD_STATUS=${PIPESTATUS[0]}
            
            # 如果构建成功，则推送镜像
            if [ $BUILD_STATUS -eq 0 ]; then
              docker push $IMAGE
            fi
            
            END_TIME=$(date +%s)
            DURATION=$((END_TIME - START_TIME))

            echo "## 镜像: $IMAGE_NAME" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "### 构建信息" >> $SUMMARY_FILE
            echo "- 目录: $dir" >> $SUMMARY_FILE
            echo "- 完整镜像名: $IMAGE" >> $SUMMARY_FILE
            echo "- 构建状态: $( [ $BUILD_STATUS -eq 0 ] && echo ✅ 成功 || echo ❌ 失败 )" >> $SUMMARY_FILE
            echo "- 构建耗时: ${DURATION}s" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            
            echo "### 使用方法" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "#### 在 Dockerfile 中使用:" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "\`\`\`Dockerfile" >> $SUMMARY_FILE
            echo "FROM $IMAGE" >> $SUMMARY_FILE
            echo "\`\`\`" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "#### 使用 docker run 命令运行:" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "\`\`\`bash" >> $SUMMARY_FILE
            echo "docker run -d --name my-$IMAGE_NAME $IMAGE" >> $SUMMARY_FILE
            echo "\`\`\`" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "#### 拉取镜像到本地:" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "\`\`\`bash" >> $SUMMARY_FILE
            echo "docker pull $IMAGE" >> $SUMMARY_FILE
            echo "\`\`\`" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            
            echo "### 构建日志" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo '```' >> $SUMMARY_FILE
            # 检查日志文件是否存在且不为空
            if [ -s build.log ]; then
              tail -n 100 build.log >> $SUMMARY_FILE
            else
              echo "无详细日志输出或日志为空" >> $SUMMARY_FILE
            fi
            echo '```' >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE

            # 创建 flag 文件并 commit 回仓库
            echo "Built on $(date)" > "$FLAG"
            git config --local user.name "github-actions"
            git config --local user.email "github-actions@github.com"
            git add "$FLAG" "$SUMMARY_FILE"
            git commit -m "Add build flag and summary for $dir"
            git push
          done

          # 将构建总结输出到 GitHub Actions 摘要
          echo "# Docker Build Summaries" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat $SUMMARY_FILE >> $GITHUB_STEP_SUMMARY

      - name: Upload build summary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-summaries
          path: docker_build_summaries.md
