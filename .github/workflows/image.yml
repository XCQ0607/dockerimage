name: Build and Push Multiple Docker Images with Summaries

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase owner
        id: repo
        run: echo "owner_lower=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB1_TOKEN }}

      - name: Build and push Docker images
        run: |
          # 安装 jq 工具用于解析 JSON
          sudo apt-get update && sudo apt-get install -y jq tree curl

          OWNER=${{ steps.repo.outputs.owner_lower }}
          REPO_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2)
          SUMMARY_FILE="docker_build_summaries.md"
          echo "# Docker Build Summaries" > $SUMMARY_FILE
          echo "" >> $SUMMARY_FILE

          # 输出总体文件数树
          echo "## Repository File Structure" >> $SUMMARY_FILE
          echo '```' >> $SUMMARY_FILE
          tree -L 3 >> $SUMMARY_FILE
          echo '```' >> $SUMMARY_FILE
          echo "" >> $SUMMARY_FILE

          # 定义完整的请求头参数
          HEADER_ARGS="-H 'accept: application/json' \
          -H 'accept-language: zh-CN,zh;q=0.9' \
          -H 'cache-control: no-cache' \
          -H 'content-type: application/json' \
          -H 'github-verified-fetch: true' \
          -H 'pragma: no-cache' \
          -H 'priority: u=1, i' \
          -H 'sec-fetch-dest: empty' \
          -H 'sec-fetch-mode: cors' \
          -H 'sec-fetch-site: same-origin' \
          -H 'x-github-client-version: 3683172a6fa60e6b068d50994e1579dcc36e4ead' \
          -H 'x-requested-with: XMLHttpRequest'"

          # 直接遍历当前目录中的所有一级子目录（每个目录作为一个Docker镜像）
          echo "Processing directories..."
          
          for dir in */ ; do
            # 检查目录是否存在
            if [ ! -d "$dir" ]; then
              echo "Skipping $dir, not a directory"
              continue
            fi
            
            # 检查目录中是否有Dockerfile
            if [ ! -f "$dir/Dockerfile" ]; then
              echo "Skipping $dir, no Dockerfile"
              continue
            fi

            FLAG="$dir/build.flag"
            # 获取目录名称（去掉路径和结尾斜杠）
            IMAGE_NAME=$(basename "$dir")
            
            echo "Processing directory: $dir, Image name: $IMAGE_NAME"
            
            # 检查是否需要重新构建
            NEEDS_REBUILD=false
            
            # 如果build.flag不存在，需要构建
            if [ ! -f "$FLAG" ]; then
              NEEDS_REBUILD=true
              echo "No build.flag found for $dir, will rebuild"
            else
              # 为当前目录调用API获取提交信息，带完整Header参数
              echo "Calling API for directory: $IMAGE_NAME with full Headers"
              DIR_COMMIT_INFO=$(curl -s $HEADER_ARGS "https://github.com/XCQ0607/dockerimage/tree-commit-info/main/$IMAGE_NAME")
              
              # 添加调试信息，输出API返回的原始数据
              echo "DEBUG: API response for $IMAGE_NAME:"
              echo "$DIR_COMMIT_INFO" | jq '.' 2>/dev/null || echo "$DIR_COMMIT_INFO"
              echo "DEBUG: End of API response"
              
              # 检查API响应是否有效
              if echo "$DIR_COMMIT_INFO" | jq empty 2>/dev/null; then
                echo "Successfully retrieved commit info for $IMAGE_NAME"
                
                # 获取build.flag的修改时间（严格来自API返回的JSON数据）
                FLAG_COMMIT_DATE=$(echo "$DIR_COMMIT_INFO" | jq -r '.["build.flag"].date // empty')
                echo "DEBUG: build.flag commit date from API: $FLAG_COMMIT_DATE"
                if [ -n "$FLAG_COMMIT_DATE" ] && [ "$FLAG_COMMIT_DATE" != "null" ]; then
                  FLAG_DATE=$(date -d "$FLAG_COMMIT_DATE" +%s 2>/dev/null || echo "0")
                  echo "Build flag date from API: $FLAG_DATE ($(date -d @$FLAG_DATE 2>/dev/null || echo "Invalid date"))"
                else
                  echo "Failed to get build.flag date from API"
                  # 如果无法从API获取build.flag时间，则跳过此目录
                  echo "Skipping $dir, cannot get build.flag date from API"
                  continue
                fi
                
                # 检查目录中是否有文件在build.flag之后更新（所有时间都来自API）
                NEEDS_REBUILD_INNER=false
                
                # 遍历API返回的所有文件，与build.flag时间进行比较
                for file_key in $(echo "$DIR_COMMIT_INFO" | jq -r 'keys[]'); do
                  # 跳过build.flag文件本身
                  if [ "$file_key" = "build.flag" ]; then
                    continue
                  fi
                  
                  # 获取该文件的提交日期（严格来自API）
                  FILE_COMMIT_DATE=$(echo "$DIR_COMMIT_INFO" | jq -r --arg key "$file_key" '.[$key].date // empty')
                  echo "DEBUG: File $file_key commit date from API: $FILE_COMMIT_DATE"
                  
                  if [ -n "$FILE_COMMIT_DATE" ] && [ "$FILE_COMMIT_DATE" != "null" ]; then
                    FILE_DATE=$(date -d "$FILE_COMMIT_DATE" +%s 2>/dev/null || echo "0")
                    echo "File: $file_key, Commit date from API: $FILE_DATE ($(date -d @$FILE_DATE 2>/dev/null || echo "Invalid date")), Flag date: $FLAG_DATE"
                    
                    if [ "$FILE_DATE" -gt "$FLAG_DATE" ] 2>/dev/null; then
                      NEEDS_REBUILD_INNER=true
                      echo "File $file_key has been updated since last build"
                      break
                    fi
                  else
                    echo "No commit info for file: $file_key"
                  fi
                done
                
                if [ "$NEEDS_REBUILD_INNER" = true ]; then
                  NEEDS_REBUILD=true
                else
                  echo "Skipping $dir, no files updated since last build"
                  continue
                fi
              else
                echo "Failed to get valid JSON from commit info API for $IMAGE_NAME"
                # 如果API调用失败，则跳过此目录
                echo "Skipping $dir, API call failed"
                continue
              fi
            fi

            # 这里是关键：只有当NEEDS_REBUILD为true时才继续构建
            if [ "$NEEDS_REBUILD" = false ]; then
              echo "Skipping $dir, already built and no updates"
              continue
            fi

            IMAGE="ghcr.io/$OWNER/$IMAGE_NAME:latest"
            echo "Building and pushing $IMAGE"

            START_TIME=$(date +%s)
            # 使用--progress=plain来增加日志输出
            docker build --progress=plain -t $IMAGE "$dir" 2>&1 | tee build.log
            BUILD_STATUS=${PIPESTATUS[0]}
            
            # 如果构建成功，则推送镜像
            if [ $BUILD_STATUS -eq 0 ]; then
              docker push $IMAGE
            fi
            
            END_TIME=$(date +%s)
            DURATION=$((END_TIME - START_TIME))

            echo "## 镜像: $IMAGE_NAME" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "### 构建信息" >> $SUMMARY_FILE
            echo "- 目录: $dir" >> $SUMMARY_FILE
            echo "- 完整镜像名: $IMAGE" >> $SUMMARY_FILE
            echo "- 构建状态: $( [ $BUILD_STATUS -eq 0 ] && echo ✅ 成功 || echo ❌ 失败 )" >> $SUMMARY_FILE
            echo "- 构建耗时: ${DURATION}s" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            
            echo "### 使用方法" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "#### 在 Dockerfile 中使用:" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "\`\`\`Dockerfile" >> $SUMMARY_FILE
            echo "FROM $IMAGE" >> $SUMMARY_FILE
            echo "\`\`\`" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "#### 使用 docker run 命令运行:" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "\`\`\`bash" >> $SUMMARY_FILE
            echo "docker run -d --name my-$IMAGE_NAME $IMAGE" >> $SUMMARY_FILE
            echo "\`\`\`" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "#### 拉取镜像到本地:" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "\`\`\`bash" >> $SUMMARY_FILE
            echo "docker pull $IMAGE" >> $SUMMARY_FILE
            echo "\`\`\`" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            
            echo "### 构建日志" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo '```' >> $SUMMARY_FILE
            # 检查日志文件是否存在且不为空
            if [ -s build.log ]; then
              tail -n 100 build.log >> $SUMMARY_FILE
            else
              echo "无详细日志输出或日志为空" >> $SUMMARY_FILE
            fi
            echo '```' >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE

            # 创建 flag 文件并 commit 回仓库
            echo "Built on $(date)" > "$FLAG"
            git config --local user.name "github-actions"
            git config --local user.email "github-actions@github.com"
            git add "$FLAG" "$SUMMARY_FILE"
            git commit -m "Add build flag and summary for $dir"
            git push
          done

          # 将构建总结输出到 GitHub Actions 摘要
          echo "# Docker Build Summaries" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat $SUMMARY_FILE >> $GITHUB_STEP_SUMMARY

      - name: Upload build summary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-summaries
          path: docker_build_summaries.md
