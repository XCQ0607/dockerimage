name: Build and Push Multiple Docker Images with Summaries

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase owner
        id: repo
        run: echo "owner_lower=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB1_TOKEN }}

      - name: Build and push Docker images
        run: |
          OWNER=${{ steps.repo.outputs.owner_lower }}
          SUMMARY_FILE="docker_build_summaries.md"
          echo "# Docker Build Summaries" > $SUMMARY_FILE
          echo "" >> $SUMMARY_FILE

          for dir in */ ; do
            # 忽略非文件夹
            if [ ! -f "$dir/Dockerfile" ]; then
              echo "Skipping $dir, no Dockerfile"
              continue
            fi

            FLAG="$dir/build.flag"
            
            # 检查是否有文件在build.flag之后更新
            NEEDS_REBUILD=false
            if [ ! -f "$FLAG" ]; then
              # 如果build.flag不存在，需要构建
              NEEDS_REBUILD=true
              echo "No build.flag found for $dir, will rebuild"
            else
              # 检查目录下是否有文件在build.flag之后更新
              # 使用更可靠的方法：比较最新的文件时间戳与build.flag时间戳
              LATEST_FILE_TIMESTAMP=$(find "$dir" -type f ! -name "build.flag" -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -d' ' -f1)
              BUILD_FLAG_TIMESTAMP=$(stat -c %Y "$FLAG" 2>/dev/null)
              
              # 检查是否成功获取到时间戳
              if [ -n "$LATEST_FILE_TIMESTAMP" ] && [ -n "$BUILD_FLAG_TIMESTAMP" ]; then
                # 比较时间戳（需要转换为整数进行比较）
                LATEST_FILE_TS_INT=$(echo "$LATEST_FILE_TIMESTAMP" | cut -d. -f1)
                if [ "$LATEST_FILE_TS_INT" -gt "$BUILD_FLAG_TIMESTAMP" ]; then
                  NEEDS_REBUILD=true
                  echo "Found updated files in $dir, will rebuild:"
                  # 列出所有更新的文件
                  find "$dir" -type f ! -name "build.flag" -newer "$FLAG" 2>/dev/null | while read file; do
                    echo "  $file"
                  done
                else
                  echo "Skipping $dir, no files updated since last build"
                  echo "Debug: Latest file timestamp: $LATEST_FILE_TIMESTAMP"
                  echo "Debug: Build flag timestamp: $BUILD_FLAG_TIMESTAMP"
                  continue
                fi
              else
                echo "Warning: Could not determine timestamps for $dir, skipping"
                continue
              fi
            fi

            if [ "$NEEDS_REBUILD" = false ]; then
              echo "Skipping $dir, already built and no updates"
              continue
            fi

            IMAGE_NAME="${dir%/}"
            IMAGE="ghcr.io/$OWNER/$IMAGE_NAME:latest"
            echo "Building and pushing $IMAGE"

            START_TIME=$(date +%s)
            # 使用--progress=plain来增加日志输出
            docker build --progress=plain -t $IMAGE "$dir" 2>&1 | tee build.log
            BUILD_STATUS=${PIPESTATUS[0]}
            
            # 如果构建成功，则推送镜像
            if [ $BUILD_STATUS -eq 0 ]; then
              docker push $IMAGE
            fi
            
            END_TIME=$(date +%s)
            DURATION=$((END_TIME - START_TIME))

            echo "## 镜像: $IMAGE_NAME" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "### 构建信息" >> $SUMMARY_FILE
            echo "- 目录: $dir" >> $SUMMARY_FILE
            echo "- 完整镜像名: $IMAGE" >> $SUMMARY_FILE
            echo "- 构建状态: $( [ $BUILD_STATUS -eq 0 ] && echo ✅ 成功 || echo ❌ 失败 )" >> $SUMMARY_FILE
            echo "- 构建耗时: ${DURATION}s" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            
            echo "### 使用方法" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "#### 在 Dockerfile 中使用:" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "\`\`\`Dockerfile" >> $SUMMARY_FILE
            echo "FROM $IMAGE" >> $SUMMARY_FILE
            echo "\`\`\`" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "#### 使用 docker run 命令运行:" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "\`\`\`bash" >> $SUMMARY_FILE
            echo "docker run -d --name my-$IMAGE_NAME $IMAGE" >> $SUMMARY_FILE
            echo "\`\`\`" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "#### 拉取镜像到本地:" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "\`\`\`bash" >> $SUMMARY_FILE
            echo "docker pull $IMAGE" >> $SUMMARY_FILE
            echo "\`\`\`" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            
            echo "### 构建日志" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo '```' >> $SUMMARY_FILE
            # 检查日志文件是否存在且不为空
            if [ -s build.log ]; then
              tail -n 100 build.log >> $SUMMARY_FILE
            else
              echo "无详细日志输出或日志为空" >> $SUMMARY_FILE
            fi
            echo '```' >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE

            # 创建 flag 文件并 commit 回仓库
            echo "Built on $(date)" > "$FLAG"
            git config --local user.name "github-actions"
            git config --local user.email "github-actions@github.com"
            git add "$FLAG" "$SUMMARY_FILE"
            git commit -m "Add build flag and summary for $dir"
            git push
          done

          # 将构建总结输出到 GitHub Actions 摘要
          echo "# Docker Build Summaries" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat $SUMMARY_FILE >> $GITHUB_STEP_SUMMARY

      - name: Upload build summary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-summaries
          path: docker_build_summaries.md
