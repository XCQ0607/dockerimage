name: Build and Push Multiple Docker Images with Summaries

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase owner
        id: repo
        run: echo "owner_lower=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB1_TOKEN }}

      - name: Build and push Docker images
        run: |
          OWNER=${{ steps.repo.outputs.owner_lower }}
          SUMMARY_FILE="docker_build_summaries.md"
          echo "# Docker Build Summaries" > $SUMMARY_FILE
          echo "" >> $SUMMARY_FILE

          # 获取当前提交的变更文件列表（可选，用于调试）
          echo "=== DEBUG INFO ==="
          echo "Current commit: $(git rev-parse HEAD)"
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            echo "Files changed in latest commit:"
            git diff --name-only HEAD~1 HEAD || echo "No changes or unable to determine"
          else
            echo "First commit, no previous commit to compare"
          fi
          echo "=================="
          echo ""

          for dir in */ ; do
            # 忽略非文件夹
            if [ ! -d "$dir" ] || [ ! -f "$dir/Dockerfile" ]; then
              echo "Skipping $dir, no Dockerfile"
              continue
            fi

            FLAG="$dir/build.flag"
            
            # 检查是否有文件在build.flag之后更新
            NEEDS_REBUILD=false
            if [ ! -f "$FLAG" ]; then
              # 如果build.flag不存在，需要构建
              NEEDS_REBUILD=true
              echo "No build.flag found for $dir, will rebuild"
            else
              # 使用git log来检查文件变更，这是更可靠的方式
              echo "=== Checking $dir ==="
              
              # 查看自从build.flag最后一次提交以来，该目录下是否有文件变更
              # 首先尝试使用--follow参数
              LAST_BUILD_COMMIT=$(git log -1 --format="%H" --follow -- "$FLAG" 2>/dev/null)
              
              # 如果--follow失败，则不使用--follow参数
              if [ -z "$LAST_BUILD_COMMIT" ]; then
                LAST_BUILD_COMMIT=$(git log -1 --format="%H" -- "$FLAG" 2>/dev/null)
              fi
              
              # 如果仍然无法获取commit，则尝试其他方法
              if [ -z "$LAST_BUILD_COMMIT" ]; then
                # 如果无法找到上次构建的commit，默认需要重建
                NEEDS_REBUILD=true
                echo "Cannot find last build commit for $FLAG, will rebuild"
              else
                echo "Last build commit for $dir: $LAST_BUILD_COMMIT"
                echo "Current HEAD commit: $(git rev-parse HEAD)"
                
                # 检查是否是相同的commit
                if [ "$LAST_BUILD_COMMIT" = "$(git rev-parse HEAD)" ]; then
                  # 如果是相同的commit，检查是否是第一次运行（没有之前的构建记录）
                  COMMIT_COUNT=$(git log --oneline "$FLAG" | wc -l)
                  if [ "$COMMIT_COUNT" -le 1 ]; then
                    # 如果build.flag只有一个commit，说明是新创建的，需要构建
                    NEEDS_REBUILD=true
                    echo "New build.flag detected for $dir, will rebuild"
                  else
                    # 检查从上次构建以来该目录的变更文件列表
                    CHANGES_SINCE_LAST_BUILD=$(git diff --name-only "$LAST_BUILD_COMMIT" HEAD -- "$dir" 2>/dev/null | grep -v "^$FLAG$" || true)
                    
                    if [ -n "$CHANGES_SINCE_LAST_BUILD" ]; then
                      NEEDS_REBUILD=true
                      echo "Found updated files in $dir, will rebuild:"
                      echo "$CHANGES_SINCE_LAST_BUILD"
                    else
                      echo "Skipping $dir, no files updated since last build according to git history"
                      echo "==="
                      continue
                    fi
                  fi
                else
                  # 不同的commit，正常比较
                  CHANGES_SINCE_LAST_BUILD=$(git diff --name-only "$LAST_BUILD_COMMIT" HEAD -- "$dir" 2>/dev/null | grep -v "^$FLAG$" || true)
                  
                  if [ -n "$CHANGES_SINCE_LAST_BUILD" ]; then
                    NEEDS_REBUILD=true
                    echo "Found updated files in $dir, will rebuild:"
                    echo "$CHANGES_SINCE_LAST_BUILD"
                  else
                    echo "Skipping $dir, no files updated since last build according to git history"
                    echo "==="
                    continue
                  fi
                fi
              fi
              echo "==="
            fi

            # 这里是关键：只有当NEEDS_REBUILD为true时才继续构建
            if [ "$NEEDS_REBUILD" = false ]; then
              echo "Skipping $dir, already built and no updates"
              continue
            fi

            IMAGE_NAME="${dir%/}"
            IMAGE="ghcr.io/$OWNER/$IMAGE_NAME:latest"
            echo "Building and pushing $IMAGE"

            START_TIME=$(date +%s)
            # 使用--progress=plain来增加日志输出
            docker build --progress=plain -t $IMAGE "$dir" 2>&1 | tee build.log
            BUILD_STATUS=${PIPESTATUS[0]}
            
            # 如果构建成功，则推送镜像
            if [ $BUILD_STATUS -eq 0 ]; then
              docker push $IMAGE
            fi
            
            END_TIME=$(date +%s)
            DURATION=$((END_TIME - START_TIME))

            echo "## 镜像: $IMAGE_NAME" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "### 构建信息" >> $SUMMARY_FILE
            echo "- 目录: $dir" >> $SUMMARY_FILE
            echo "- 完整镜像名: $IMAGE" >> $SUMMARY_FILE
            echo "- 构建状态: $( [ $BUILD_STATUS -eq 0 ] && echo ✅ 成功 || echo ❌ 失败 )" >> $SUMMARY_FILE
            echo "- 构建耗时: ${DURATION}s" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            
            echo "### 使用方法" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "#### 在 Dockerfile 中使用:" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "\`\`\`Dockerfile" >> $SUMMARY_FILE
            echo "FROM $IMAGE" >> $SUMMARY_FILE
            echo "\`\`\`" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "#### 使用 docker run 命令运行:" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "\`\`\`bash" >> $SUMMARY_FILE
            echo "docker run -d --name my-$IMAGE_NAME $IMAGE" >> $SUMMARY_FILE
            echo "\`\`\`" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "#### 拉取镜像到本地:" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo "\`\`\`bash" >> $SUMMARY_FILE
            echo "docker pull $IMAGE" >> $SUMMARY_FILE
            echo "\`\`\`" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            
            echo "### 构建日志" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            echo '```' >> $SUMMARY_FILE
            # 检查日志文件是否存在且不为空
            if [ -s build.log ]; then
              tail -n 100 build.log >> $SUMMARY_FILE
            else
              echo "无详细日志输出或日志为空" >> $SUMMARY_FILE
            fi
            echo '```' >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE

            # 创建 flag 文件并 commit 回仓库
            echo "Built on $(date)" > "$FLAG"
            git config --local user.name "github-actions"
            git config --local user.email "github-actions@github.com"
            git add "$FLAG" "$SUMMARY_FILE"
            git commit -m "Add build flag and summary for $dir"
            git push
          done

          # 将构建总结输出到 GitHub Actions 摘要
          echo "# Docker Build Summaries" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat $SUMMARY_FILE >> $GITHUB_STEP_SUMMARY

      - name: Upload build summary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-summaries
          path: docker_build_summaries.md
